set nocompatible
set shell=/bin/bash

set path+=**
set wildmenu

filetype on

function! PackInit() abort
  packadd minpac

  call minpac#init()
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  call minpac#add('HerringtonDarkholme/yats.vim')
  call minpac#add('MarcWeber/vim-addon-mw-utils')
  call minpac#add('airblade/vim-gitgutter')
  call minpac#add('altercation/vim-colors-solarized')
  call minpac#add('andrewradev/linediff.vim')
  call minpac#add('cormacrelf/vim-colors-github')
  call minpac#add('editorconfig/editorconfig-vim')
  call minpac#add('ekalinin/Dockerfile.vim')
  call minpac#add('elixir-lang/vim-elixir')
  call minpac#add('elmcast/elm-vim')
  call minpac#add('garbas/vim-snipmate')
  call minpac#add('isRuslan/vim-es6')
  call minpac#add('jelera/vim-javascript-syntax')
  call minpac#add('joshdick/onedark.vim')
  call minpac#add('joukevandermaas/vim-ember-hbs')
  call minpac#add('jparise/vim-graphql')
  call minpac#add('jremmen/vim-ripgrep')
  call minpac#add('junegunn/fzf')
  call minpac#add('lumiliet/vim-twig')
  call minpac#add('leafgarland/typescript-vim')
  call minpac#add('majutsushi/tagbar')
  call minpac#add('mhartington/oceanic-next')
  call minpac#add('ntpeters/vim-better-whitespace')
  call minpac#add('othree/javascript-libraries-syntax.vim')
  call minpac#add('pangloss/vim-javascript')
  call minpac#add('radenling/vim-dispatch-neovim')
  call minpac#add('scrooloose/nerdtree')
  call minpac#add('thoughtbot/vim-rspec')
  call minpac#add('tomtom/tlib_vim')
  call minpac#add('tpope/vim-bundler')
  call minpac#add('tpope/vim-classpath')
  call minpac#add('tpope/vim-dispatch')
  call minpac#add('tpope/vim-fireplace')
  call minpac#add('tpope/vim-fugitive')
  call minpac#add('tpope/vim-projectionist')
  call minpac#add('tpope/vim-rails')
  call minpac#add('tpope/vim-surround')
  call minpac#add('tpope/vim-unimpaired')
  call minpac#add('vim-airline/vim-airline')
  call minpac#add('vim-airline/vim-airline-themes')
  call minpac#add('vim-scripts/VimClojure')
  call minpac#add('vim-scripts/align')
  call minpac#add('w0rp/ale')

endfunction

command! PackUpdate call PackInit() | call minpac#update('', {'do': 'call minpac#status()'})
command! PackClean  call PackInit() | call minpac#clean()
command! PackStatus call PackInit() | call minpac#status()

command! CTags !ctags --recurse . --exclude=node_modules --exclude=elm-stuff --exclude=_build
command! ExpandSplit execute "vertical resize 800"
command! CleanCR execute "%s/\\r\\(\\n\\)/\\1/g"

" syntax for razor
" Bundle "https://github.com/othree/javascript-libraries-syntax.vim.git"

filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

set guifont=Inconsolata\ for\ Powerline:h15
let g:Powerline_symbols = 'fancy'
set encoding=utf-8
set fillchars+=stl:\ ,stlnc:\
set termencoding=utf-8

" Let's remember some things, like where the .vim folder is.
if has("win32") || has("win64")
    let windows=1
    let vimfiles=$HOME . "/vimfiles"
    let sep=";"
else
    let windows=0
    let vimfiles=$HOME . "/.vim"
    let sep=":"
endif

let classpath = join(
   \[".",
   \ "src", "src/main/clojure", "src/main/resources",
   \ "test", "src/test/clojure", "src/test/resources",
   \ "classes", "target/classes",
   \ "lib/*", "lib/dev/*",
   \ "bin",
   \ vimfiles."/lib/*"
   \],
   \ sep)

" Settings for VimClojure
let vimclojureRoot = vimfiles."/bundle/vimclojure"
let vimclojure#HighlightBuiltins=1
let vimclojure#HighlightContrib=1
let vimclojure#DynamicHighlighting=1
let vimclojure#ParenRainbow=1

" https://spotify.slack.com/archives/C06GE07RU/p1572878174102000
set bs=2
set vb
set nu!
set cursorline
set hlsearch
set incsearch
set smartcase
set ignorecase
set expandtab         " tabs to spaces, just do :retab
set tabstop=2
set softtabstop=2
set shiftround
set shiftwidth=2
syntax on             " Enable syntax highlighting
compiler ruby         " Enable compiler support for ruby
set nowrap
set mouse=a
let mapleader = ","
let g:calendar_monday = 1
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>
runtime macros/matchit.vim

nnoremap <silent> <Space> :silent noh<Bar>echo<CR>
nnoremap <C-p> :<C-u>FZF<CR>

" ALE / Lintng
" Lint only on save
let g:ale_lint_on_text_changed = 'never'
" You can disable this option too
" if you don't want linters to run on opening a file
let g:ale_lint_on_enter = 0
" let g:ale_sign_error = '❌'
" let g:ale_sign_warning = '⚠️'
" let g:ale_fixers['javascript'] = ['eslint']

" Fix files automatically on save
let g:ale_fix_on_save = 1
" Enable CTRL+J/K to move around errors
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" remove scrollers...
setglobal guioptions-=T     " Disable toolbars by default
setglobal guioptions-=L
setglobal guioptions-=l
setglobal guioptions-=R
setglobal guioptions-=r
setglobal guioptions-=b
setglobal guioptions-=h

"vimdiff settings
map <silent> <leader>2 :diffget 2<CR> :diffupdate<CR>
map <silent> <leader>3 :diffget 3<CR> :diffupdate<CR>
map <silent> <leader>4 :diffget 4<CR> :diffupdate<CR>

"show/hide invisibles
nmap <leader>l :set list!<CR>
set listchars=tab:»\ ,trail:·

"Vim masterclass
xnoremap . :norm.<CR>

"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

augroup AutoGroup
  if has("autocmd")
    autocmd!
    autocmd bufwritepost .vimrc source $MYVIMRC
    autocmd BufNewFile,BufReadPost Gemfile setfiletype ruby
    autocmd BufNewFile,BufReadPost Guardfile setfiletype ruby
    autocmd BufNewFile,BufReadPost Dockerfile setfiletype config
    autocmd BufNewFile,BufReadPost *.cljx setfiletype clojure
    autocmd BufNewFile,BufReadPost *.json setfiletype javascript
    autocmd BufNewFile,BufReadPost *.md setfiletype markdown
    autocmd BufNewFile,BufReadPost *.slim setfiletype slim
    autocmd BufNewFile,BufReadPost *.jake setfiletype javascript
    autocmd BufNewFile,BufReadPost *.twig setfiletype html
    autocmd BufWritePre *.rb :%s/\s\+$//e
    autocmd BufWritePre *.ex :%s/\s\+$//e
    autocmd ColorScheme * hi clear SpellBad
        \| hi SpellBad cterm=underline,bold ctermfg=red
  endif
augroup end

nmap <leader>v :tabedit $MYVIMRC<CR>

" fireplace
au FileType clj nmap <leader>e :Eval<CR>
au FileType cljs nmap <leader>e :Eval<CR>

" elm
au FileType elm nmap <leader>b <Plug>(elm-make)
au FileType elm nmap <leader>m <Plug>(elm-make-main)
au FileType elm nmap <leader>t <Plug>(elm-test)
au FileType elm nmap <leader>r <Plug>(elm-repl)
au FileType elm nmap <leader>e <Plug>(elm-error-detail)
au FileType elm nmap <leader>d <Plug>(elm-show-docs)
au FileType elm nmap <leader>w <Plug>(elm-browse-docs)

map <Leader>bg :let &background=( &background == "dark"? "light" : "dark" )<CR>

" --------------
" color
set t_Co=256 " 256 colors
let background ="dark"
let g:rehash256 = 1

if (has("termguicolors"))
 set termguicolors
endif

" Theme
syntax enable
colorscheme oceanicnext

hi clear SpellBad
hi SpellBad cterm=underline,bold ctermfg=red

" let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_javascript_eslint_exec = ['/usr/local/bin/eslint']
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_debug = 3

let g:airline_powerline_fonts = 1
let g:airline_theme='aurora'

let g:airline_section_a='%{toupper(mode())}'
let g:airline_section_x=''
let g:airline_section_y=''

" Global backup dir
set backupdir=~/.vim/swp
set directory=~/.vim/swp

" CTRLP ignore
let g:ctrlp_custom_ignore = {
    \ 'dir': '\.git$\|\.hg$\|\.svn$\|bower_components$\|dist$\|node_modules$\|project_files$\|public$\|tmp$\|webpack$\|elm-stuff$\|_build$\|__mocks__$',
    \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

" Search for visual with *
" xnoremap * :<C-u>
" call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
"
" function! s:VSetSearch()
"   let temp = @s
"   norm! gv"sy
"   let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
"   let @s = temp
" endfunction

" Spell
nmap <Leader>s :setlocal spell! spelllang=en_us<CR>

"NERDTREE
map <leader>nt :NERDTree%<cr>

"Ripgrep word under cursor
map <leader>f :Rg <c-r>=expand("<cword>")<cr>
map <leader>ft :Rg <c-r>=expand("<cword>")<cr> -t
