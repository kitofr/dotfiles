set nocompatible
set shell=/bin/bash
packadd minpac

call minpac#init()

set path+=**
set wildmenu

command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()
command! CTags !ctags --recurse .
command! ExpandSplit execute "vertical resize 800"
command! CleanCR execute "%s/\\r\\(\\n\\)/\\1/g"

filetype on

"Add your bundles here
call minpac#add('altercation/vim-colors-solarized')
call minpac#add('andrewradev/linediff.vim')
call minpac#add('editorconfig/editorconfig-vim')
call minpac#add('ekalinin/Dockerfile.vim')
call minpac#add('elixir-lang/vim-elixir')
call minpac#add('elmcast/elm-vim')
call minpac#add('jelera/vim-javascript-syntax')
call minpac#add('joshdick/onedark.vim')
call minpac#add('jparise/vim-graphql')
call minpac#add('junegunn/fzf')
call minpac#add('k-takata/minpac', {'type': 'opt'})
call minpac#add('rking/ag.vim')
call minpac#add('scrooloose/nerdtree')
call minpac#add('thoughtbot/vim-rspec')
call minpac#add('tpope/vim-bundler')
call minpac#add('tpope/vim-classpath')
call minpac#add('tpope/vim-dispatch')
call minpac#add('tpope/vim-fireplace')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-rails')
call minpac#add('tpope/vim-surround')
call minpac#add('tpope/vim-unimpaired')
call minpac#add('vim-airline/vim-airline')
call minpac#add('vim-airline/vim-airline-themes')
call minpac#add('vim-scripts/VimClojure')
call minpac#add('vim-scripts/align')
call minpac#add('vim-syntastic/syntastic')
" 
" Bundle "MarcWeber/vim-addon-mw-utils"
" Bundle "garbas/vim-snipmate"
" Bundle "honza/vim-snippets"
" Bundle "tomtom/tlib_vim"
" Bundle 'Puppet-Syntax-Highlighting'
" Bundle 'acarapetis/vim-colors-github'
" Bundle 'badwolf'
" Bundle 'carlosgaldino/elixir-snippets'
" Bundle 'epeli/slimux'
" Bundle 'kitofr/vim-functions'
" Bundle 'molokai'
" Bundle 'neochrome/todo.vim'
" Bundle 'oceandeep'
" Bundle 'peaksea'
" Bundle 'rdark'
" Bundle 'slim-template/vim-slim.git'
" Bundle 'vim-coffee-script'
" Bundle 'vimwiki'
" Bundle 'wgibbs/vim-irblack'
" Bundle 'wombat256.vim'
" Bundle 'kitofr/kitofr-snippets'
" 
"...All your other bundles...
" if iCanHazVundle == 0
"     echo "Installing Bundles, please ignore key map error messages"
"     echo ""
"     :BundleInstall
" endif

" syntax for razor
" Bundle "adamclerk/vim-razor"
" 
" Bundle "https://github.com/othree/javascript-libraries-syntax.vim.git"

" vim-scripts repos
" Bundle 'L9'
" Bundle 'FuzzyFinder'
" non github repos
" Bundle 'git://git.wincent.com/command-t.git'
filetype plugin indent on

set guifont=Inconsolata\ for\ Powerline:h15
let g:Powerline_symbols = 'fancy'
set encoding=utf-8
set fillchars+=stl:\ ,stlnc:\
set termencoding=utf-8

" Let's remember some things, like where the .vim folder is.
if has("win32") || has("win64")
    let windows=1
    let vimfiles=$HOME . "/vimfiles"
    let sep=";"
else
    let windows=0
    let vimfiles=$HOME . "/.vim"
    let sep=":"
endif

let classpath = join(
   \[".",
   \ "src", "src/main/clojure", "src/main/resources",
   \ "test", "src/test/clojure", "src/test/resources",
   \ "classes", "target/classes",
   \ "lib/*", "lib/dev/*",
   \ "bin",
   \ vimfiles."/lib/*"
   \],
   \ sep)

" Settings for VimClojure
let vimclojureRoot = vimfiles."/bundle/vimclojure"
let vimclojure#HighlightBuiltins=1
let vimclojure#HighlightContrib=1
let vimclojure#DynamicHighlighting=1
let vimclojure#ParenRainbow=1

set bs=2
set vb
set nu!
set cursorline
" set cursorcolumn
set hlsearch
set expandtab         " tabs to spaces, just do :retab
set tabstop=2
set softtabstop=2
set shiftwidth=2
syntax on             " Enable syntax highlighting
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins
compiler ruby         " Enable compiler support for ruby
set nowrap
set mouse=a
let mapleader = ","
let g:calendar_monday = 1
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>
runtime macros/matchit.vim

set incsearch ignorecase hlsearch
nnoremap <silent> <Space> :silent noh<Bar>echo<CR>
nnoremap <C-p> :<C-u>FZF<CR>

filetype on           " Enable filetype detection
" remove scrollers...
setglobal guioptions-=T     " Disable toolbars by default
setglobal guioptions-=L
setglobal guioptions-=l
setglobal guioptions-=R
setglobal guioptions-=r
setglobal guioptions-=b
setglobal guioptions-=h

"vimdiff settings
map <silent> <leader>2 :diffget 2<CR> :diffupdate<CR>
map <silent> <leader>3 :diffget 3<CR> :diffupdate<CR>
map <silent> <leader>4 :diffget 4<CR> :diffupdate<CR>

"show/hide invisibles
nmap <leader>l :set list!<CR>
set listchars=tab:»\ ,trail:·

"Vim masterclass
xnoremap . :norm.<CR>

"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
"set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" tpope's
set statusline=[%n]\ %<%.99f\ %h%w%m%r%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%y%=%-16(\ %l,%c-%v\ %)%P

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
  autocmd BufNewFile,BufReadPost Gemfile setfiletype ruby
  autocmd BufNewFile,BufReadPost Guardfile setfiletype ruby
  autocmd BufNewFile,BufReadPost Dockerfile setfiletype config
  autocmd BufNewFile,BufReadPost *.cljx setfiletype clojure
  autocmd BufNewFile,BufReadPost *.json setfiletype javascript
  autocmd BufNewFile,BufReadPost *.md setfiletype markdown
  autocmd BufNewFile,BufReadPost *.slim setfiletype slim
  autocmd BufWritePre *.rb :%s/\s\+$//e
  autocmd BufWritePre *.ex :%s/\s\+$//e
  autocmd ColorScheme * hi clear SpellBad
      \| hi SpellBad cterm=underline,bold ctermfg=red
endif
nmap <leader>v :tabedit $MYVIMRC<CR>

" fireplace
au FileType clj nmap <leader>e :Eval<CR>
au FileType cljs nmap <leader>e :Eval<CR>

" elm
au FileType elm nmap <leader>b <Plug>(elm-make)
au FileType elm nmap <leader>m <Plug>(elm-make-main)
au FileType elm nmap <leader>t <Plug>(elm-test)
au FileType elm nmap <leader>r <Plug>(elm-repl)
au FileType elm nmap <leader>e <Plug>(elm-error-detail)
au FileType elm nmap <leader>d <Plug>(elm-show-docs)
au FileType elm nmap <leader>w <Plug>(elm-browse-docs)

map <Leader>bg :let &background=( &background == "dark"? "light" : "dark" )<CR>

" --------------
" color
set t_Co=256 " 256 colors
set term=screen-256color
let g:solarized_termcolors=256
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
colorscheme solarized
set background=dark
"let g:molokai_original = 1
let g:rehash256 = 1

let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_javascript_eslint_exec = ['/usr/local/bin/eslint']
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_debug = 3

let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='solarized'

" Global backup dir
set backupdir=~/.vim/swp
set directory=~/.vim/swp

" CTRLP ignore
" let g:ctrlp_custom_ignore = {
"     \ 'dir': '\.git$\|\.hg$\|\.svn$\|bower_components$\|dist$\|node_modules$\|project_files$\|assets$\|webpack$\|elm-stuff$\|_build$',
"     \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

" Spell
nmap <Leader>s :setlocal spell! spelllang=en_us<CR>

" Rspec
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

"NERDTREE
map <leader>nt :NERDTree%<cr>

