set nocompatible
set shell=/bin/bash

set path+=**
set wildmenu

filetype on

function! PackInit() abort
  packadd minpac

  call minpac#init()
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  call minpac#add('HerringtonDarkholme/yats.vim')
  call minpac#add('MarcWeber/vim-addon-mw-utils')
  call minpac#add('airblade/vim-gitgutter')
  call minpac#add('altercation/vim-colors-solarized')
  call minpac#add('andrewradev/linediff.vim')
  call minpac#add('cormacrelf/vim-colors-github')
  call minpac#add('editorconfig/editorconfig-vim')
  call minpac#add('ekalinin/Dockerfile.vim')
  call minpac#add('elixir-lang/vim-elixir')
  call minpac#add('elmcast/elm-vim')
  call minpac#add('garbas/vim-snipmate')
  call minpac#add('isRuslan/vim-es6')
  call minpac#add('joukevandermaas/vim-ember-hbs')
  call minpac#add('jparise/vim-graphql')
  call minpac#add('jremmen/vim-ripgrep')
  call minpac#add('junegunn/fzf')
  call minpac#add('leafgarland/typescript-vim')
  call minpac#add('lumiliet/vim-twig')
  call minpac#add('majutsushi/tagbar')
  call minpac#add('mhartington/oceanic-next')
  call minpac#add('MaxMEllon/vim-jsx-pretty')
  call minpac#add('ntpeters/vim-better-whitespace')
	call minpac#add('neoclide/coc.nvim', {'branch': 'release'})
  call minpac#add('othree/javascript-libraries-syntax.vim')
  call minpac#add('pangloss/vim-javascript')
  call minpac#add('radenling/vim-dispatch-neovim', {'branch': 'release'})
  call minpac#add('scrooloose/nerdtree')
  call minpac#add('stefandtw/quickfix-reflector.vim')
  call minpac#add('thoughtbot/vim-rspec')
  call minpac#add('tomtom/tlib_vim')
  call minpac#add('tpope/vim-bundler')
  call minpac#add('tpope/vim-classpath')
  call minpac#add('tpope/vim-dispatch')
  call minpac#add('tpope/vim-fireplace')
  call minpac#add('tpope/vim-fugitive')
  call minpac#add('tpope/vim-projectionist')
  call minpac#add('tpope/vim-rails')
  call minpac#add('tpope/vim-surround')
  call minpac#add('tpope/vim-unimpaired')
  call minpac#add('vim-airline/vim-airline')
  call minpac#add('vim-airline/vim-airline-themes')
  call minpac#add('vim-scripts/VimClojure')
  call minpac#add('vim-scripts/align')
	call minpac#add('rainglow/vim')
  call minpac#add('w0rp/ale')
endfunction

command! PackUpdate call PackInit() | call minpac#update('', {'do': 'call minpac#status()'})
command! PackClean  call PackInit() | call minpac#clean()
command! PackStatus call PackInit() | call minpac#status()

command! CTags !ctags --recurse . --exclude=node_modules --exclude=elm-stuff --exclude=_build
command! ExpandSplit execute "vertical resize 800"
command! CleanCR execute "%s/\\r\\(\\n\\)/\\1/g"

" syntax for razor
" Bundle "https://github.com/othree/javascript-libraries-syntax.vim.git"

filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

set guifont=Fira\ Code:h15
let g:Powerline_symbols = 'fancy'
set encoding=utf-8
set fillchars+=stl:\ ,stlnc:\
set termencoding=utf-8

" Let's remember some things, like where the .vim folder is.
if has("win32") || has("win64")
    let windows=1
    let vimfiles=$HOME . "/vimfiles"
    let sep=";"
else
    let windows=0
    let vimfiles=$HOME . "/.vim"
    let sep=":"
endif

let classpath = join(
   \[".",
   \ "src", "src/main/clojure", "src/main/resources",
   \ "test", "src/test/clojure", "src/test/resources",
   \ "classes", "target/classes",
   \ "lib/*", "lib/dev/*",
   \ "bin",
   \ vimfiles."/lib/*"
   \],
   \ sep)

" Settings for VimClojure
let vimclojureRoot = vimfiles."/bundle/vimclojure"
let vimclojure#HighlightBuiltins=1
let vimclojure#HighlightContrib=1
let vimclojure#DynamicHighlighting=1
let vimclojure#ParenRainbow=1

" https://spotify.slack.com/archives/C06GE07RU/p1572878174102000
set bs=2
set vb
set nu!
set cursorline
set hlsearch
set incsearch
set smartcase
set ignorecase
" set expandtab         " tabs to spaces, just do :retab
set tabstop=2         " Let's use editorconfig
" set softtabstop=2
set shiftround
set shiftwidth=2
syntax on             " Enable syntax highlighting
compiler ruby         " Enable compiler support for ruby
set nowrap
set mouse=a
let mapleader = ","
let g:calendar_monday = 1
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>
runtime macros/matchit.vim

nnoremap <silent> <Space> :silent noh<Bar>echo<CR>
nnoremap <C-p> :<C-u>FZF<CR>

" ALE / Lintng
" Lint only on save
let g:ale_lint_on_text_changed = 'never'
" You can disable this option too
" if you don't want linters to run on opening a file
let g:ale_lint_on_enter = 0
" let g:ale_sign_error = '❌'
" let g:ale_sign_warning = '⚠️'
" let g:ale_fixers['javascript'] = ['eslint']

" Fix files automatically on save
" let g:ale_fix_on_save = 1
" Enable CTRL+J/K to move around errors
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" remove scrollers...
setglobal guioptions-=T     " Disable toolbars by default
setglobal guioptions-=L
setglobal guioptions-=l
setglobal guioptions-=R
setglobal guioptions-=r
setglobal guioptions-=b
setglobal guioptions-=h

"vimdiff settings
map <silent> <leader>2 :diffget 2<CR> :diffupdate<CR>
map <silent> <leader>3 :diffget 3<CR> :diffupdate<CR>
map <silent> <leader>4 :diffget 4<CR> :diffupdate<CR>

"show/hide invisibles
nmap <leader>l :set list!<CR>
set listchars=tab:»\ ,trail:·

"Vim masterclass
xnoremap . :norm.<CR>

"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

augroup AutoGroup
  if has("autocmd")
    autocmd!
    " autocmd bufwritepost .vimrc source $MYVIMRC
    autocmd BufNewFile,BufReadPost Gemfile setfiletype ruby
    autocmd BufNewFile,BufReadPost Guardfile setfiletype ruby
    autocmd BufNewFile,BufReadPost Dockerfile setfiletype config
    autocmd BufNewFile,BufReadPost *.cljx setfiletype clojure
    autocmd BufNewFile,BufReadPost *.json setfiletype javascript
    autocmd BufNewFile,BufReadPost *.md setfiletype markdown
    autocmd BufNewFile,BufReadPost *.slim setfiletype slim
    autocmd BufNewFile,BufReadPost *.jake setfiletype javascript
    autocmd BufNewFile,BufReadPost *.twig setfiletype html
    autocmd BufWritePre *.rb :%s/\s\+$//e
    autocmd BufWritePre *.ex :%s/\s\+$//e
    autocmd ColorScheme * hi clear SpellBad
        \| hi SpellBad cterm=underline,bold ctermfg=red
  endif
augroup end

nmap <leader>v :tabedit $MYVIMRC<CR>

" fireplace
au FileType clj nmap <leader>e :Eval<CR>
au FileType cljs nmap <leader>e :Eval<CR>

" elm
au FileType elm nmap <leader>b <Plug>(elm-make)
au FileType elm nmap <leader>m <Plug>(elm-make-main)
au FileType elm nmap <leader>t <Plug>(elm-test)
au FileType elm nmap <leader>r <Plug>(elm-repl)
au FileType elm nmap <leader>e <Plug>(elm-error-detail)
au FileType elm nmap <leader>d <Plug>(elm-show-docs)
au FileType elm nmap <leader>w <Plug>(elm-browse-docs)

map <Leader>bg :let &background=( &background == "dark"? "light" : "dark" )<CR>


" typescript order and remove imports
autocmd FileType typescript setlocal formatprg=prettier\ --parser\ typescript
autocmd FileType typescriptreact setlocal formatprg=prettier\ --parser\ typescript
nmap <leader>i :CocCommand tsserver.organizeImports<cr>

" --------------
" color
set t_Co=256 " 256 colors
set background="dark"
let g:rehash256 = 1

if (has("termguicolors"))
 set termguicolors
endif

" Theme
syntax enable
colorscheme OceanicNext

hi clear SpellBad
hi SpellBad cterm=underline,bold ctermfg=red

let g:airline_powerline_fonts = 1
let g:airline_theme='oceanicnext'

let g:airline_section_a='%{toupper(mode())}'
let g:airline_section_x=''
let g:airline_section_y=''
let g:airline#extensions#branch#format = 1

" CTRLP ignore
let g:ctrlp_custom_ignore = {
    \ 'dir': '\.git$\|\.hg$\|\.svn$\|bower_components$\|dist$\|node_modules$\|project_files$\|public$\|tmp$\|webpack$\|elm-stuff$\|_build$\|__mocks__$',
    \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

" Search for visual with *
" xnoremap * :<C-u>
" call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
"
" function! s:VSetSearch()
"   let temp = @s
"   norm! gv"sy
"   let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
"   let @s = temp
" endfunction

" Spell
nmap <Leader>s :setlocal spell! spelllang=en_us<CR>

"NERDTREE
map <leader>nt :NERDTree%<cr>

"Ripgrep word under cursor
map <leader>f :Rg <c-r>=expand("<cword>")<cr>
map <leader>ft :Rg <c-r>=expand("<cword>")<cr> -t
map <leader>jf :set ft=json<cr><Esc>:%!python -m json.tool<cr>
:command! -nargs=1 -range SuperRetab <line1>,<line2>s/\v%(^ *)@<= {<args>}/\t/g
map <leader>jp :%!python -m json.tool

:inoremap <S-Tab> <C-V><Tab>

"coc
let g:coc_global_extensions = ['coc-tsserver', 'coc-json', 'coc-git', 'coc-html']
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>=  <Plug>(coc-format-selected)
nmap <leader>=  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
