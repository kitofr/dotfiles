set nocompatible
set shell=/bin/bash

filetype off
" Setting up Vundle - the vim plugin bundler
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle.."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let iCanHazVundle=0
endif
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

"Add your bundles here
Bundle 'Syntastic' 
Bundle 'altercation/vim-colors-solarized' 
Bundle 'kien/ctrlp.vim'
Bundle 'guicolorscheme.vim'

" original repos on github
" Bundle 'kitofr/vim-functions'
Bundle 'neochrome/todo.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'Align'
Bundle 'VimClojure'
Bundle 'surround.vim'
Bundle 'vimwiki'
Bundle 'vim-coffee-script'
Bundle 'linediff.vim'
Bundle 'ag.vim'
" snipmate deps
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "honza/vim-snippets"
Bundle "garbas/vim-snipmate"
Bundle 'elixir-lang/vim-elixir'
Bundle 'carlosgaldino/elixir-snippets'
Bundle 'Puppet-Syntax-Highlighting'
Bundle 'slim-template/vim-slim.git'

Plugin 'elmcast/elm-vim'
Bundle 'epeli/slimux'

" colorschemes
Bundle 'Solarized'
Bundle 'wgibbs/vim-irblack'
Bundle 'oceandeep'
Bundle 'badwolf'
Bundle 'rdark'
Bundle 'peaksea'
Bundle 'wombat256.vim' 
Bundle 'molokai' 

Bundle "DrTom/fsharp-vim"

Bundle "tpope/vim-fugitive"
Bundle "tpope/vim-classpath"
Bundle "tpope/vim-dispatch"
Bundle "tpope/vim-fireplace"
Bundle "tpope/vim-rails"
Bundle "tpope/vim-bundler"

"status line
Bundle "Lokaltog/powerline", { 'rtp': 'powerline/bindings/vim' }
"My snippets
Bundle 'kitofr/kitofr-snippets'

Plugin 'editorconfig-vim'

"...All your other bundles...
if iCanHazVundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :BundleInstall
endif

" syntax for razor
Bundle "adamclerk/vim-razor"

Bundle "https://github.com/othree/javascript-libraries-syntax.vim.git"

" vim-scripts repos
" Bundle 'L9'
" Bundle 'FuzzyFinder'
" non github repos
" Bundle 'git://git.wincent.com/command-t.git'
filetype plugin indent on

set guifont=Inconsolata\ for\ Powerline:h15
let g:Powerline_symbols = 'fancy'
set encoding=utf-8
set fillchars+=stl:\ ,stlnc:\
set termencoding=utf-8

" Let's remember some things, like where the .vim folder is.
if has("win32") || has("win64")
    let windows=1
    let vimfiles=$HOME . "/vimfiles"
    let sep=";"
else
    let windows=0
    let vimfiles=$HOME . "/.vim"
    let sep=":"
endif

let classpath = join(
   \[".",
   \ "src", "src/main/clojure", "src/main/resources",
   \ "test", "src/test/clojure", "src/test/resources",
   \ "classes", "target/classes",
   \ "lib/*", "lib/dev/*",
   \ "bin",
   \ vimfiles."/lib/*"
   \],
   \ sep)

" Settings for VimClojure
let vimclojureRoot = vimfiles."/bundle/vimclojure"
let vimclojure#HighlightBuiltins=1
let vimclojure#HighlightContrib=1
let vimclojure#DynamicHighlighting=1
let vimclojure#ParenRainbow=1

set bs=2
set vb
set nu!
set cursorline
" set cursorcolumn
set hlsearch
set expandtab					" tabs to spaces, just do :retab
set tabstop=2
set softtabstop=2
set shiftwidth=2
syntax on             " Enable syntax highlighting
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins
compiler ruby         " Enable compiler support for ruby
set nobackup
set nowrap
set mouse=a
let mapleader = ","
let g:calendar_monday = 1
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>
" noremap <Up> <Nop>
" noremap <Down> <Nop>
" noremap <Left> <Nop>
" noremap <Right> <Nop>
runtime macros/matchit.vim

set incsearch ignorecase hlsearch
nnoremap <silent> <Space> :silent noh<Bar>echo<CR>

command ExpandSplit execute "vertical resize 800"

filetype on           " Enable filetype detection
" remove scrollers... 
setglobal guioptions-=T     " Disable toolbars by default
setglobal guioptions-=L
setglobal guioptions-=l
setglobal guioptions-=R
setglobal guioptions-=r
setglobal guioptions-=b
setglobal guioptions-=h

"vimdiff settings
map <silent> <leader>2 :diffget 2<CR> :diffupdate<CR>
map <silent> <leader>3 :diffget 3<CR> :diffupdate<CR>
map <silent> <leader>4 :diffget 4<CR> :diffupdate<CR>

"show/hide invisibles
nmap <leader>l :set list!<CR>
set listchars=tab:»\ ,eol:¬

"Vim masterclass
xnoremap . :norm.<CR>

"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
"set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" tpope's
set statusline=[%n]\ %<%.99f\ %h%w%m%r%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%y%=%-16(\ %l,%c-%v\ %)%P

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

command CleanCR execute "%s/\\r\\(\\n\\)/\\1/g"

if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
  autocmd BufNewFile,BufReadPost Gemfile setfiletype ruby
  autocmd BufNewFile,BufReadPost Guardfile setfiletype ruby
  autocmd BufNewFile,BufReadPost Dockerfile setfiletype config
  autocmd BufNewFile,BufReadPost *.cljx setfiletype clojure
  autocmd BufNewFile,BufReadPost *.json setfiletype javascript
  autocmd BufNewFile,BufReadPost *.md setfiletype markdown
  autocmd BufNewFile,BufReadPost *.slim setfiletype slim
  autocmd BufWritePre *.rb :%s/\s\+$//e
  autocmd BufWritePre *.ex :%s/\s\+$//e
  autocmd ColorScheme * hi clear SpellBad
      \| hi SpellBad cterm=underline,bold ctermfg=red 
endif
nmap <leader>v :tabedit $MYVIMRC<CR>

" fireplace
au FileType clj nmap <leader>e :Eval<CR>

" elm
au FileType elm nmap <leader>b <Plug>(elm-make)
au FileType elm nmap <leader>m <Plug>(elm-make-main)
au FileType elm nmap <leader>t <Plug>(elm-test)
au FileType elm nmap <leader>r <Plug>(elm-repl)
au FileType elm nmap <leader>e <Plug>(elm-error-detail)
au FileType elm nmap <leader>d <Plug>(elm-show-docs)
au FileType elm nmap <leader>w <Plug>(elm-browse-docs)

map <Leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR>


" --------------
" color
set t_Co=256 " 256 colors
set term=screen-256color
let g:solarized_termcolors=256
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
set background=dark
colorscheme solarized 
let g:molokai_original = 1
let g:rehash256 = 1

" Global backup dir
set backupdir=~/.vim/swp
set directory=~/.vim/swp

" CTRLP ignore
let g:ctrp_custom_ignore = 'elm-stuff\|DS_Store\|git'

" Spell
nmap <Leader>s :setlocal spell! spelllang=en_us<CR>
