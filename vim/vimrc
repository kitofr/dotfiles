set nocompatible
set shell=/bin/bash

filetype off
"
" Setting up Vundle - the vim plugin bundler
    let iCanHazVundle=1
    let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
    if !filereadable(vundle_readme)
        echo "Installing Vundle.."
        echo ""
        silent !mkdir -p ~/.vim/bundle
        silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
        let iCanHazVundle=0
    endif
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()
    Bundle 'gmarik/vundle'
    "Add your bundles here
    Bundle 'Syntastic' 
    Bundle 'altercation/vim-colors-solarized' 
    Bundle 'wincent/Command-T'
    " original repos on github
    Bundle 'tpope/vim-fugitive'
    " Bundle 'kitofr/vim-functions'
    Bundle 'neochrome/todo.vim'
    Bundle 'scrooloose/nerdtree'
    Bundle 'Align'
    Bundle 'VimClojure'
    Bundle 'surround.vim'
    Bundle 'vimwiki'
    "Bundle 'jpalardy/vim-slime'
    Bundle 'vim-coffee-script'
    " snipmate deps
    Bundle "MarcWeber/vim-addon-mw-utils"
    Bundle "tomtom/tlib_vim"
    Bundle "honza/vim-snippets"
    Bundle "garbas/vim-snipmate"
    Bundle 'elixir-lang/vim-elixir'
    Bundle 'carlosgaldino/elixir-snippets'

    " colorschemes
    Bundle 'Solarized'
    Bundle 'wgibbs/vim-irblack'
    Bundle 'oceandeep'
    Bundle 'rdark'
		Bundle 'peaksea'
    
		Bundle "DrTom/fsharp-vim"

    Bundle "tpope/vim-fugitive"
    "Bundle "tpope/vim-classpath"
    Bundle "tpope/vim-dispatch"
    Bundle "tpope/vim-fireplace"

		"status line
		Bundle "Lokaltog/powerline"

    "My snippets
    Bundle 'kitofr/kitofr-snippets'

    "...All your other bundles...
    if iCanHazVundle == 0
        echo "Installing Bundles, please ignore key map error messages"
        echo ""
        :BundleInstall
    endif

" syntax for razor
Bundle "adamclerk/vim-razor"

Bundle "https://github.com/othree/javascript-libraries-syntax.vim.git"

" vim-scripts repos
" Bundle 'L9'
" Bundle 'FuzzyFinder'
" non github repos
" Bundle 'git://git.wincent.com/command-t.git'
filetype plugin indent on

if has("gui_gtk2")
  set guifont=Monaco\ 11
elseif has("gui_win32")
  source $VIMRUNTIME/mswin.vim
  behave mswin
  set guifont=Monaco:h11:cANSI
endif

" Let's remember some things, like where the .vim folder is.
if has("win32") || has("win64")
    let windows=1
    let vimfiles=$HOME . "/vimfiles"
    let sep=";"
else
    let windows=0
    let vimfiles=$HOME . "/.vim"
    let sep=":"
endif

let classpath = join(
   \[".",
   \ "src", "src/main/clojure", "src/main/resources",
   \ "test", "src/test/clojure", "src/test/resources",
   \ "classes", "target/classes",
   \ "lib/*", "lib/dev/*",
   \ "bin",
   \ vimfiles."/lib/*"
   \],
   \ sep)

" Settings for VimClojure
let vimclojureRoot = vimfiles."/bundle/vimclojure"
let vimclojure#HighlightBuiltins=1
let vimclojure#HighlightContrib=1
let vimclojure#DynamicHighlighting=1
let vimclojure#ParenRainbow=1

colorscheme ir_black 
set bs=2
set vb
set nu!
set cursorline
set hlsearch
"set expandtab					" tabs to spaces, just do :retab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set nocompatible      " We're running Vim, not Vi!
syntax on             " Enable syntax highlighting
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins
let g:ruby_path = "C:\Ruby193\bin"
compiler ruby         " Enable compiler support for ruby
set nobackup
set nowrap
let mapleader = ","
let g:calendar_monday = 1
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
runtime macros/matchit.vim
filetype on           " Enable filetype detection

command ExpandSplit execute "vertical resize 800"


" remove scrollers... 
setglobal guioptions-=T     " Disable toolbars by default
setglobal guioptions-=L
setglobal guioptions-=l
setglobal guioptions-=R
setglobal guioptions-=r
setglobal guioptions-=b
setglobal guioptions-=h

"vimdiff settings
map <silent> <leader>2 :diffget 2<CR> :diffupdate<CR>
map <silent> <leader>3 :diffget 3<CR> :diffupdate<CR>
map <silent> <leader>4 :diffget 4<CR> :diffupdate<CR>

"show/hide invisibles
nmap <leader>l :set list!<CR>
set listchars=tab:»\ ,eol:¬


"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
"set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" tpope's
set statusline=[%n]\ %<%.99f\ %h%w%m%r%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%y%=%-16(\ %l,%c-%v\ %)%P

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction
